#!/usr/bin/env python3

import argparse
import jinja2
import os
import pathlib
import sys
import xtmlib

from xtmlib.interfaces import get_interfaces
from xtmlib.counters import get_counters

# templates are searched in this directory if the path doesn't resolve otherwise
CONFIG_DIR = pathlib.Path("/etc/xtables-monitor/")

# argument parser
argparser = argparse.ArgumentParser(description = "Create netfilter rules from templates")
argparser.add_argument("template", help = "The template file to use for rule generation")
argparser.add_argument("-i", "--ip-version", type = int, choices = {4, 6}, help = "Perform setup for selected IP version only (e.g. 4)", metavar = "version")
argparser.add_argument("-v", "--verbose", action = "store_true", help = "Show verbose output")
arguments = argparser.parse_args()

xtmlib.debug_mode = arguments.verbose

if arguments.ip_version:
    ip_versions = [arguments.ip_version,]
else:
    ip_versions = [4, 6]

for ip_version in ip_versions:
    xtmlib.debug("Performing setup for IPv%d" % ip_version)

    # get network interface information
    interfaces = get_interfaces(ip_version)
    counters = get_counters(ip_version)

    # try current directory first
    template_path = pathlib.Path(arguments.template)
    if template_path.is_file():
        template_path = str(template_path.resolve())
    else:
        # try config directory
        try:
            template_path = template_path.relative_to(CONFIG_DIR)
            template_path = str(template_path.resolve())
        except:
            print("Template '%s' not found!" % str(template_path))
            sys.exit(1)

    template_loader = jinja2.FileSystemLoader(searchpath="/")
    template_environment = jinja2.Environment(loader=template_loader)
    template = template_environment.get_template(template_path)

    render_vars = { "counters" : counters, "interfaces" : interfaces }
    for ipv in ip_versions:
        if ipv == ip_version:
            b = True
        else:
            b = False
        render_vars["ipv%d" % ipv] = b

    for stmt in template.generate(render_vars):
        for line in stmt.splitlines():
            line = line.lstrip()
            if not line:
                continue
            print(line)
